{"version":3,"file":"index.js","sourceRoot":"./src/","sources":["index.ts"],"names":[],"mappings":";AACA,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACrC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACnC,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AACtB,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAOzB,MAAM,IAAI,GAAY,IAAI,CAAC;AAI3B,MAAM,SAAS,GAAY,YAAY,CAAC;AAIxC,SAAS,GAAG,CAAE,OAAgB;IAC1B,OAAO,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC;AAC5C,CAAC;AAID,SAAS,MAAM,CAAE,IAAa;IAG9B,OAAO,IAAI,CAAC;;YAEA,IAAI;;4BAEY,IAAI,gCAAgC,IAAI;QAC5D,IAAI,wBAAwB,IAAI;;;;kBAItB,IAAI;gCACU,IAAI;;OAE7B,CAAC,CAAC;AACT,CAAC;AAOD,MAAM,CAAC,KAAK,CAAC,CAAC;AACd,MAAM,CAAC,GAAG,CAAC,CAAC;AACZ,MAAM,CAAC,KAAK,CAAC,CAAC;AACd,MAAM,CAAC,IAAI,CAAC,CAAC;AACb,MAAM,CAAC,MAAM,CAAC,CAAC;AASf,GAAG,CAAC,uCAAuC,IAAI,EAAE,CAAC,CAAC;AAQnD,MAAM,SAAS,GAAG,CAAC;;iEAE8C,IAAI;;;;;CAKpE,CAAC,CAAC;AAIH,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;IAClB,QAAQ,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC3C,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC/B,GAAG,CAAC,SAAS,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC;AAOH,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAEtC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC;IAG3B,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,EAAE;QACxC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAC1B,OAAO,CAAC,IAAI,EAAE,CAAC;KAClB;IAGG,IAAI,IAAI,KAAK,GAAG,EAAE;QACd,GAAG,CAAC,oBAAoB,CAAC,CAAC;KAE7B;AAET,CAAC,CAAC,CAAC","sourcesContent":["// Import required modules\nconst readline = require(\"readline\");\nconst express = require('express');\nconst app = express();\nconst fs = require(\"fs\");\n\n\n\n\n\n// Constants\nconst port : number = 1003;\n\n\n// Log prefix for console.log()\nconst logPrefix : string = \"[Patcher] \";\n\n\n// Automatically console.log with prefix\nfunction log (message : string) : void {\n    return console.log(logPrefix + message);\n}\n\n\n// File sender\nfunction sendJS (file : String) : void {\n\n// This code in the eval is JavaScript, not TypeScript btw.\nreturn eval(`\n\n      var ${file} = \"\";\n\n      fs.readFile(\"assets/${file}.js\", \"utf8\", (error, patched${file}) => {\n      ${file} = new String(patched${file});\n      })\n\n      app.use(express.static(\"dist\"));\n      app.get(\"/${file}.js\", (req, res) => {\n          res.type(\"js\").send(${file}.toString());\n      });\n      `);\n}\n\n\n\n\n// -- BEGIN GAME FILES --\n\nsendJS(\"bro\"); // bro.js\nsendJS(\"G\"); // G.js\nsendJS(\"sup\"); // sup.js\nsendJS(\"yo\"); // yo.js\nsendJS(\"main\"); // main.js\n\n// -- END GAME FILES --\n\n\n\n\n\n// Notify us that Patcher is now running\nlog(`Running Patcher at http://localhost:${port}`);\n\n\n\n\n\n// --- BEGIN DASHBOARD ---\n\nconst dashboard = (`\n\\n\nThe Craftnite.io file modifier runs along, listening on port ::${port}\nPatcher Dashboard:\n\n    [X] - Shut down Patcher\n    [R] - Reload files\n`);\n\n\n// Add keypress listener and send the dashboard\napp.listen(port, () => {\n    readline.emitKeypressEvents(process.stdin);\n    process.stdin.setRawMode(true);\n    log(dashboard);\n});\n\n\n\n\n// On Keypress\n// @ts-expect-error\nprocess.stdin.on(\"keypress\", (str, key) => {\n    // Key name\n    const { name, ctrl } = key;\n\n    // If it's [x] or [ctrl + c], then exit Patcher.\n    if (name === \"x\" || (name === \"c\" && ctrl)) {\n        log(\"Exiting Patcher...\");\n        process.exit();\n    }\n\n    // If it's [r], then reload the files.\n        if (name === \"r\") {\n            log(\"Reloading files...\");\n            // Coming Soon\n        }\n\n});\n\n// --- END DASHBOARD ---"]}