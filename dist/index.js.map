{"version":3,"file":"index.js","sourceRoot":"./src/","sources":["index.ts"],"names":[],"mappings":";AACA,MAAM,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AACrC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACnC,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AACtB,MAAM,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAOzB,MAAM,IAAI,GAAY,IAAI,CAAC;AAI3B,MAAM,SAAS,GAAY,YAAY,CAAC;AAIxC,SAAS,GAAG,CAAE,OAAgB;IAC1B,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC;IACjC,OAAO;AACX,CAAC;AAID,SAAS,MAAM,CAAE,IAAa;IAG9B,IAAI,CAAC;;MAEC,IAAI;;sBAEY,IAAI,gCAAgC,IAAI;EAC5D,IAAI,wBAAwB,IAAI;;;;YAItB,IAAI;0BACU,IAAI;;CAE7B,CAAC,CAAC;IAEH,OAAO;AACP,CAAC;AAOD,MAAM,CAAC,KAAK,CAAC,CAAC;AACd,MAAM,CAAC,GAAG,CAAC,CAAC;AACZ,MAAM,CAAC,KAAK,CAAC,CAAC;AACd,MAAM,CAAC,IAAI,CAAC,CAAC;AACb,MAAM,CAAC,MAAM,CAAC,CAAC;AASf,GAAG,CAAC,uCAAuC,IAAI,EAAE,CAAC,CAAC;AAQnD,MAAM,SAAS,GAAG,CAAC;;iEAE8C,IAAI;;;;;CAKpE,CAAC,CAAC;AAIH,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;IAClB,QAAQ,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC3C,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC/B,GAAG,CAAC,SAAS,CAAC,CAAC;AACnB,CAAC,CAAC,CAAC;AAOH,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAEtC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,GAAG,CAAC;IAG3B,IAAI,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,IAAI,CAAC,EAAE;QACxC,GAAG,CAAC,oBAAoB,CAAC,CAAC;QAC1B,OAAO,CAAC,IAAI,EAAE,CAAC;KAClB;IAGG,IAAI,IAAI,KAAK,GAAG,EAAE;QACd,GAAG,CAAC,oBAAoB,CAAC,CAAC;KAE7B;AAET,CAAC,CAAC,CAAC","sourcesContent":["// Import required modules\r\nconst readline = require(\"readline\");\r\nconst express = require('express');\r\nconst app = express();\r\nconst fs = require(\"fs\");\r\n\r\n\r\n\r\n\r\n\r\n// Constants\r\nconst port : number = 1003;\r\n\r\n\r\n// Log prefix for console.log()\r\nconst logPrefix : string = \"[Patcher] \";\r\n\r\n\r\n// Automatically console.log with prefix\r\nfunction log (message : string) : void {\r\n    console.log(logPrefix + message);\r\n    return;\r\n}\r\n\r\n\r\n// File sender\r\nfunction sendJS (file : String) : void {\r\n\r\n// This is JavaScript, not TypeScript btw.\r\neval(`\r\n\r\nvar ${file} = \"\";\r\n\r\nfs.readFile(\"assets/${file}.js\", \"utf8\", (error, patched${file}) => {\r\n${file} = new String(patched${file});\r\n})\r\n\r\napp.use(express.static(\"dist\"));\r\napp.get(\"/${file}.js\", (req, res) => {\r\n    res.type(\"js\").send(${file}.toString());\r\n});\r\n`);\r\n\r\nreturn;\r\n}\r\n\r\n\r\n\r\n\r\n// -- BEGIN GAME FILES --\r\n\r\nsendJS(\"bro\"); // bro.js\r\nsendJS(\"G\"); // G.js\r\nsendJS(\"sup\"); // sup.js\r\nsendJS(\"yo\"); // yo.js\r\nsendJS(\"main\"); // main.js\r\n\r\n// -- END GAME FILES --\r\n\r\n\r\n\r\n\r\n\r\n// Notify us that Patcher is now running\r\nlog(`Running Patcher at http://localhost:${port}`);\r\n\r\n\r\n\r\n\r\n\r\n// --- BEGIN DASHBOARD ---\r\n\r\nconst dashboard = (`\r\n\\n\r\nThe Craftnite.io file modifier runs along, listening on port ::${port}\r\nPatcher Dashboard:\r\n\r\n    [X] - Shut down Patcher\r\n    [R] - Reload files\r\n`);\r\n\r\n\r\n// Add keypress listener and send the dashboard\r\napp.listen(port, () => {\r\n    readline.emitKeypressEvents(process.stdin);\r\n    process.stdin.setRawMode(true);\r\n    log(dashboard);\r\n});\r\n\r\n\r\n\r\n\r\n// On Keypress\r\n// @ts-expect-error\r\nprocess.stdin.on(\"keypress\", (str, key) => {\r\n    // Key name\r\n    const { name, ctrl } = key;\r\n\r\n    // If it's [x] or [ctrl + c], then exit Patcher.\r\n    if (name === \"x\" || (name === \"c\" && ctrl)) {\r\n        log(\"Exiting Patcher...\");\r\n        process.exit();\r\n    }\r\n\r\n    // If it's [r], then reload the files.\r\n        if (name === \"r\") {\r\n            log(\"Reloading files...\");\r\n            // Coming Soon\r\n        }\r\n\r\n});\r\n\r\n// --- END DASHBOARD ---"]}